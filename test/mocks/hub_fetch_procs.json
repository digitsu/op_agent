{"data":[{"address":"1LSKtFoK81PNxN4SEn2qErsa8V3PizUBCx","blk":{"i":598031,"t":1567296779},"confirmed":true,"hash":"0b9574b5aa3e11462ee95261819de1ba8cebdadf12b625abe47091ac36229efc","i":57,"meta":{"author":"Libs","version":"0.0.2"},"name":"object/extend","ref":"0b9574b5","script":"--[[\nExtends the context table by placing the given values at the given keys\n(overriding values where keys already exist).\n\nTakes a variable length number of arguments and maps them into key value pairs.\nWhere a key is a path seperated by `.`, the table is traversed creating a nested\ntable until the value is set on the tip.\n\n## Examples\n\n    OP_RETURN\n      $REF\n        \"user.name\"\n        \"Joe Bloggs\"\n        \"user.age\"\n        20\n    # {\n    #   user: {\n    #     age: 20,\n    #     name: \"Joe Bloggs\"\n    #   }\n    # }\n\n@version 0.0.2\n@author Libs\n]]--\nreturn function(state, ...)\n  state = state or {}\n  assert(\n    type(state) == 'table',\n    'Invalid context. Must receive a table.')\n\n  -- Helper function to extend the given object with the path and value.\n  -- Splits the path into an array of keys and iterrates over each, either\n  -- extending the context object or setting the value on the tip.\n  local function extend(state, path, value)\n    local keys = {}\n    string.gsub(path, '[^%.]+', function(k) table.insert(keys, k) end)\n    for i, k in ipairs(keys) do\n      if i == #keys then\n        state[k] = value\n      elseif type(state[k]) ~= 'table' then\n        state[k] = {}\n      end\n      state = state[k]\n    end\n  end\n\n  -- Iterrate over each vararg pair to get the path and value\n  -- Unless path is blank, the context is extended\n  for n = 1, select('#', ...) do\n    if math.fmod(n, 2) > 0 then\n      local path = select(n, ...)\n      local value = select(n+1, ...)\n      if path ~= nil and string.len(path) > 0 then\n        extend(state, path, value)\n      end\n    end\n  end\n\n  return state\nend","txid":"cafed856ef20208e2120a27c81601ee1f2e9395907760c511a50afdb9d4a7464"},{"address":"1LSKtFoK81PNxN4SEn2qErsa8V3PizUBCx","blk":{"i":598031,"t":1567296779},"confirmed":true,"hash":"77bbf52ef2a6ed5ffde6d7a1e2157a5e38b6392a83a1bdc4221b50c6a402ea55","i":61,"meta":{"author":"Libs","version":"0.0.2"},"name":"object/put_new","ref":"77bbf52e","script":"--[[\nExtends the context table by placing the given values at the given keys\nunless the key already exists.\n\nTakes a variable length number of arguments and maps them into key value pairs.\nWhere a key is a path seperated by `.`, the table is traversed creating a nested\ntable until the value is set on the tip.\n\n## Examples\n\n    OP_RETURN\n      $REF\n        \"user.profile\"\n        \"name\"\n        \"Joe Bloggs\"\n        |\n      $REF\n        \"account\"\n        \"name\"\n        \"Acme Corp\"\n    # {\n    #   account: {\n    #     name: \"Acme Corp\"\n    #   },\n    #   user: {\n    #     profile: {  \n    #       name: \"Joe Bloggs,\n    #     }\n    #   }\n    # }\n\n@version 0.0.2\n@author Libs\n]]--\nreturn function(state, path, ...)\n  state = state or {}\n  local obj = {}\n  assert(\n    type(state) == 'table',\n    'Invalid context. Must receive a table.')\n  assert(\n    type(path) == 'string' and string.len(path) > 0,\n    'Invalid path. Must receive a string.')\n\n  -- Helper function to extend the given object with the path and value.\n  -- Splits the path into an array of keys and iterrates over each, either\n  -- extending the context object or setting the value on the tip, without\n  -- overwriting any existing value.\n  local function extend_new(state, path, value)\n    local keys = {}\n    string.gsub(path, '[^%.]+', function(k) table.insert(keys, k) end)\n    for i, k in ipairs(keys) do\n      if type(state) ~= 'table' then\n        break\n      elseif state[k] == nil then\n        if i == #keys then state[k] = value else state[k] = {} end\n      end\n      state = state[k]\n    end\n  end\n\n  -- Iterrate over each vararg pair to get the path and value\n  -- Unless path is blank, the PUT object is extended\n  for n = 1, select('#', ...) do\n    if math.fmod(n, 2) > 0 then\n      local path = select(n, ...)\n      local value = select(n+1, ...)\n      if path ~= nil and string.len(path) > 0 then\n        extend_new(obj, path, value)\n      end\n    end\n  end\n\n  -- Extend the context\n  extend_new(state, path, obj)\n  return state\nend","txid":"311f3b8590e4ed6871a20227c3a452543d9edcea7f99c235c6bebf23ca5206dc"}]}